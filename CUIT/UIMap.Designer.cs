// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by coded UI test builder.
//      Version: 12.0.0.0
//
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------

namespace CUIT
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Drawing;
    using System.Text.RegularExpressions;
    using System.Windows.Input;
    using Microsoft.VisualStudio.TestTools.UITest.Extension;
    using Microsoft.VisualStudio.TestTools.UITesting;
    using Microsoft.VisualStudio.TestTools.UITesting.WinControls;
    using Microsoft.VisualStudio.TestTools.UnitTesting;
    using Keyboard = Microsoft.VisualStudio.TestTools.UITesting.Keyboard;
    using Mouse = Microsoft.VisualStudio.TestTools.UITesting.Mouse;
    using MouseButtons = System.Windows.Forms.MouseButtons;
    
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public partial class UIMap
    {
        
        /// <summary>
        /// AddNumbers - Use 'AddNumbersParams' to pass parameters into this method.
        /// </summary>
        public void AddNumbers()
        {
            #region Variable Declarations
            WinEdit uITxtNum2Edit = this.UIFrmCalculatorWindow.UITxtNum2Window.UITxtNum2Edit;
            WinEdit uITxtNum1Edit = this.UIFrmCalculatorWindow.UITxtNum1Window.UITxtNum1Edit;
            WinButton uIAdditionButton = this.UIFrmCalculatorWindow.UIAdditionWindow.UIAdditionButton;
            #endregion

            // Launch '%USERPROFILE%\Desktop\KDPM_Buoi08\GUI\bin\Debug\GUI.exe'
            ApplicationUnderTest uIFrmCalculatorWindow = ApplicationUnderTest.Launch(this.AddNumbersParams.UIFrmCalculatorWindowExePath, this.AddNumbersParams.UIFrmCalculatorWindowAlternateExePath);

            // Type '5' in 'txtNum2' text box
            uITxtNum2Edit.Text = this.AddNumbersParams.UITxtNum2EditText;

            // Type '1' in 'txtNum1' text box
            uITxtNum1Edit.Text = this.AddNumbersParams.UITxtNum1EditText;

            // Click 'Addition' button
            Mouse.Click(uIAdditionButton, new Point(54, 5));
        }
        
        /// <summary>
        /// ValidateSum - Use 'ValidateSumExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateSum()
        {
            #region Variable Declarations
            WinEdit uITxtResulltEdit = this.UIFrmCalculatorWindow.UITxtResulltWindow.UITxtResulltEdit;
            #endregion

            // Verify that the 'Text' property of 'txtResullt' text box equals '6'
            Assert.AreEqual(this.ValidateSumExpectedValues.UITxtResulltEditText, uITxtResulltEdit.Text);
        }
        
        /// <summary>
        /// RecordedInput - Use 'RecordedInputParams' to pass parameters into this method.
        /// </summary>
        public void RecordedInput()
        {
            #region Variable Declarations
            WinEdit uITxtNumAEdit = this.UIFrmMinMaxWindow.UITxtNumAWindow.UITxtNumAEdit;
            WinEdit uITxtNumBEdit = this.UIFrmMinMaxWindow.UITxtNumBWindow.UITxtNumBEdit;
            WinEdit uITxtNumCEdit = this.UIFrmMinMaxWindow.UITxtNumCWindow.UITxtNumCEdit;
            WinButton uICalculateButton = this.UIFrmMinMaxWindow.UICalculateWindow.UICalculateButton;
            #endregion

            // Launch '%USERPROFILE%\Desktop\KDPM_Buoi08\GUI\bin\Debug\GUI.exe'
            ApplicationUnderTest uIFrmMinMaxWindow = ApplicationUnderTest.Launch(this.RecordedInputParams.UIFrmMinMaxWindowExePath, this.RecordedInputParams.UIFrmMinMaxWindowAlternateExePath);

            // Type '7' in 'txtNumA' text box
            uITxtNumAEdit.Text = this.RecordedInputParams.UITxtNumAEditText;

            // Type '2' in 'txtNumB' text box
            uITxtNumBEdit.Text = this.RecordedInputParams.UITxtNumBEditText;

            // Type '9' in 'txtNumC' text box
            uITxtNumCEdit.Text = this.RecordedInputParams.UITxtNumCEditText;

            // Click 'Calculate' button
            Mouse.Click(uICalculateButton, new Point(45, 10));
        }
        
        /// <summary>
        /// ValidateMaxValue - Use 'ValidateMaxValueExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateMaxValue()
        {
            #region Variable Declarations
            WinEdit uITxtMaxEdit = this.UIFrmMinMaxWindow.UITxtMaxWindow.UITxtMaxEdit;
            #endregion

            // Verify that the 'Text' property of 'txtMax' text box equals '9'
            Assert.AreEqual(this.ValidateMaxValueExpectedValues.UITxtMaxEditText, uITxtMaxEdit.Text);
        }
        
        /// <summary>
        /// ValidateMinValue - Use 'ValidateMinValueExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateMinValue()
        {
            #region Variable Declarations
            WinEdit uITxtMinEdit = this.UIFrmMinMaxWindow.UITxtMinWindow.UITxtMinEdit;
            #endregion

            // Verify that the 'Text' property of 'txtMin' text box equals '2'
            Assert.AreEqual(this.ValidateMinValueExpectedValues.UITxtMinEditText, uITxtMinEdit.Text);
        }
        
        /// <summary>
        /// AddInputNumbers - Use 'AddInputNumbersParams' to pass parameters into this method.
        /// </summary>
        public void AddInputNumbers(string numA, string numB, string numC)
        {
            #region Variable Declarations
            WinEdit uITxtNumAEdit = this.UIFrmMinMaxWindow.UITxtNumAWindow.UITxtNumAEdit;
            WinEdit uITxtNumBEdit = this.UIFrmMinMaxWindow.UITxtNumBWindow.UITxtNumBEdit;
            WinEdit uITxtNumCEdit = this.UIFrmMinMaxWindow.UITxtNumCWindow.UITxtNumCEdit;
            WinButton uICalculateButton = this.UIFrmMinMaxWindow.UICalculateWindow.UICalculateButton;
            #endregion

            // Launch '%USERPROFILE%\Desktop\KDPM_Buoi08\GUI\bin\Debug\GUI.exe'
            ApplicationUnderTest uIFrmMinMaxWindow = ApplicationUnderTest.Launch(this.AddInputNumbersParams.UIFrmMinMaxWindowExePath, this.AddInputNumbersParams.UIFrmMinMaxWindowAlternateExePath);

            // Type '4' in 'txtNumA' text box
            uITxtNumAEdit.Text = numA;

            // Type '2' in 'txtNumB' text box
            uITxtNumBEdit.Text = numB;

            // Type '11' in 'txtNumC' text box
            uITxtNumCEdit.Text = numC;

            // Click 'Calculate' button
            Mouse.Click(uICalculateButton, new Point(60, 14));
        }
        
        /// <summary>
        /// ValidateMax - Use 'ValidateMaxExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateMax(string max)
        {
            #region Variable Declarations
            WinEdit uITxtMaxEdit = this.UIFrmMinMaxWindow.UITxtMaxWindow.UITxtMaxEdit;
            #endregion

            // Verify that the 'Text' property of 'txtMax' text box equals '11'
            Assert.AreEqual(max, uITxtMaxEdit.Text);
        }
        
        /// <summary>
        /// ValidateMin - Use 'ValidateMinExpectedValues' to pass parameters into this method.
        /// </summary>
        public void ValidateMin(string min)
        {
            #region Variable Declarations
            WinEdit uITxtMinEdit = this.UIFrmMinMaxWindow.UITxtMinWindow.UITxtMinEdit;
            #endregion

            // Verify that the 'Text' property of 'txtMin' text box equals '2'
            Assert.AreEqual(min, uITxtMinEdit.Text);
        }
        
        #region Properties
        public virtual AddNumbersParams AddNumbersParams
        {
            get
            {
                if ((this.mAddNumbersParams == null))
                {
                    this.mAddNumbersParams = new AddNumbersParams();
                }
                return this.mAddNumbersParams;
            }
        }
        
        public virtual ValidateSumExpectedValues ValidateSumExpectedValues
        {
            get
            {
                if ((this.mValidateSumExpectedValues == null))
                {
                    this.mValidateSumExpectedValues = new ValidateSumExpectedValues();
                }
                return this.mValidateSumExpectedValues;
            }
        }
        
        public virtual RecordedInputParams RecordedInputParams
        {
            get
            {
                if ((this.mRecordedInputParams == null))
                {
                    this.mRecordedInputParams = new RecordedInputParams();
                }
                return this.mRecordedInputParams;
            }
        }
        
        public virtual ValidateMaxValueExpectedValues ValidateMaxValueExpectedValues
        {
            get
            {
                if ((this.mValidateMaxValueExpectedValues == null))
                {
                    this.mValidateMaxValueExpectedValues = new ValidateMaxValueExpectedValues();
                }
                return this.mValidateMaxValueExpectedValues;
            }
        }
        
        public virtual ValidateMinValueExpectedValues ValidateMinValueExpectedValues
        {
            get
            {
                if ((this.mValidateMinValueExpectedValues == null))
                {
                    this.mValidateMinValueExpectedValues = new ValidateMinValueExpectedValues();
                }
                return this.mValidateMinValueExpectedValues;
            }
        }
        
        public virtual AddInputNumbersParams AddInputNumbersParams
        {
            get
            {
                if ((this.mAddInputNumbersParams == null))
                {
                    this.mAddInputNumbersParams = new AddInputNumbersParams();
                }
                return this.mAddInputNumbersParams;
            }
        }
        
        public virtual ValidateMaxExpectedValues ValidateMaxExpectedValues
        {
            get
            {
                if ((this.mValidateMaxExpectedValues == null))
                {
                    this.mValidateMaxExpectedValues = new ValidateMaxExpectedValues();
                }
                return this.mValidateMaxExpectedValues;
            }
        }
        
        public virtual ValidateMinExpectedValues ValidateMinExpectedValues
        {
            get
            {
                if ((this.mValidateMinExpectedValues == null))
                {
                    this.mValidateMinExpectedValues = new ValidateMinExpectedValues();
                }
                return this.mValidateMinExpectedValues;
            }
        }
        
        public UIFrmCalculatorWindow UIFrmCalculatorWindow
        {
            get
            {
                if ((this.mUIFrmCalculatorWindow == null))
                {
                    this.mUIFrmCalculatorWindow = new UIFrmCalculatorWindow();
                }
                return this.mUIFrmCalculatorWindow;
            }
        }
        
        public UIFrmMinMaxWindow UIFrmMinMaxWindow
        {
            get
            {
                if ((this.mUIFrmMinMaxWindow == null))
                {
                    this.mUIFrmMinMaxWindow = new UIFrmMinMaxWindow();
                }
                return this.mUIFrmMinMaxWindow;
            }
        }
        #endregion
        
        #region Fields
        private AddNumbersParams mAddNumbersParams;
        
        private ValidateSumExpectedValues mValidateSumExpectedValues;
        
        private RecordedInputParams mRecordedInputParams;
        
        private ValidateMaxValueExpectedValues mValidateMaxValueExpectedValues;
        
        private ValidateMinValueExpectedValues mValidateMinValueExpectedValues;
        
        private AddInputNumbersParams mAddInputNumbersParams;
        
        private ValidateMaxExpectedValues mValidateMaxExpectedValues;
        
        private ValidateMinExpectedValues mValidateMinExpectedValues;
        
        private UIFrmCalculatorWindow mUIFrmCalculatorWindow;
        
        private UIFrmMinMaxWindow mUIFrmMinMaxWindow;
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddNumbers'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AddNumbersParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Desktop\KDPM_Buoi08\GUI\bin\Debug\GUI.exe'
        /// </summary>
        public string UIFrmCalculatorWindowExePath = "C:\\Users\\hodan\\Desktop\\KDPM_Buoi08\\GUI\\bin\\Debug\\GUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Desktop\KDPM_Buoi08\GUI\bin\Debug\GUI.exe'
        /// </summary>
        public string UIFrmCalculatorWindowAlternateExePath = "%USERPROFILE%\\Desktop\\KDPM_Buoi08\\GUI\\bin\\Debug\\GUI.exe";
        
        /// <summary>
        /// Type '5' in 'txtNum2' text box
        /// </summary>
        public string UITxtNum2EditText = "5";
        
        /// <summary>
        /// Type '1' in 'txtNum1' text box
        /// </summary>
        public string UITxtNum1EditText = "1";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateSum'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class ValidateSumExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'txtResullt' text box equals '6'
        /// </summary>
        public string UITxtResulltEditText = "6";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'RecordedInput'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class RecordedInputParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Desktop\KDPM_Buoi08\GUI\bin\Debug\GUI.exe'
        /// </summary>
        public string UIFrmMinMaxWindowExePath = "C:\\Users\\hodan\\Desktop\\KDPM_Buoi08\\GUI\\bin\\Debug\\GUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Desktop\KDPM_Buoi08\GUI\bin\Debug\GUI.exe'
        /// </summary>
        public string UIFrmMinMaxWindowAlternateExePath = "%USERPROFILE%\\Desktop\\KDPM_Buoi08\\GUI\\bin\\Debug\\GUI.exe";
        
        /// <summary>
        /// Type '7' in 'txtNumA' text box
        /// </summary>
        public string UITxtNumAEditText = "7";
        
        /// <summary>
        /// Type '2' in 'txtNumB' text box
        /// </summary>
        public string UITxtNumBEditText = "2";
        
        /// <summary>
        /// Type '9' in 'txtNumC' text box
        /// </summary>
        public string UITxtNumCEditText = "9";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateMaxValue'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class ValidateMaxValueExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'txtMax' text box equals '9'
        /// </summary>
        public string UITxtMaxEditText = "9";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateMinValue'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class ValidateMinValueExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'txtMin' text box equals '2'
        /// </summary>
        public string UITxtMinEditText = "2";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'AddInputNumbers'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class AddInputNumbersParams
    {
        
        #region Fields
        /// <summary>
        /// Launch '%USERPROFILE%\Desktop\KDPM_Buoi08\GUI\bin\Debug\GUI.exe'
        /// </summary>
        public string UIFrmMinMaxWindowExePath = "C:\\Users\\hodan\\Desktop\\KDPM_Buoi08\\GUI\\bin\\Debug\\GUI.exe";
        
        /// <summary>
        /// Launch '%USERPROFILE%\Desktop\KDPM_Buoi08\GUI\bin\Debug\GUI.exe'
        /// </summary>
        public string UIFrmMinMaxWindowAlternateExePath = "%USERPROFILE%\\Desktop\\KDPM_Buoi08\\GUI\\bin\\Debug\\GUI.exe";
        
        /// <summary>
        /// Type '4' in 'txtNumA' text box
        /// </summary>
        public string UITxtNumAEditText = "4";
        
        /// <summary>
        /// Type '2' in 'txtNumB' text box
        /// </summary>
        public string UITxtNumBEditText = "2";
        
        /// <summary>
        /// Type '11' in 'txtNumC' text box
        /// </summary>
        public string UITxtNumCEditText = "11";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateMax'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class ValidateMaxExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'txtMax' text box equals '11'
        /// </summary>
        public string UITxtMaxEditText = "11";
        #endregion
    }
    
    /// <summary>
    /// Parameters to be passed into 'ValidateMin'
    /// </summary>
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class ValidateMinExpectedValues
    {
        
        #region Fields
        /// <summary>
        /// Verify that the 'Text' property of 'txtMin' text box equals '2'
        /// </summary>
        public string UITxtMinEditText = "2";
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIFrmCalculatorWindow : WinWindow
    {
        
        public UIFrmCalculatorWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "FrmCalculator";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("FrmCalculator");
            #endregion
        }
        
        #region Properties
        public UITxtNum2Window UITxtNum2Window
        {
            get
            {
                if ((this.mUITxtNum2Window == null))
                {
                    this.mUITxtNum2Window = new UITxtNum2Window(this);
                }
                return this.mUITxtNum2Window;
            }
        }
        
        public UITxtNum1Window UITxtNum1Window
        {
            get
            {
                if ((this.mUITxtNum1Window == null))
                {
                    this.mUITxtNum1Window = new UITxtNum1Window(this);
                }
                return this.mUITxtNum1Window;
            }
        }
        
        public UIAdditionWindow UIAdditionWindow
        {
            get
            {
                if ((this.mUIAdditionWindow == null))
                {
                    this.mUIAdditionWindow = new UIAdditionWindow(this);
                }
                return this.mUIAdditionWindow;
            }
        }
        
        public UITxtResulltWindow UITxtResulltWindow
        {
            get
            {
                if ((this.mUITxtResulltWindow == null))
                {
                    this.mUITxtResulltWindow = new UITxtResulltWindow(this);
                }
                return this.mUITxtResulltWindow;
            }
        }
        #endregion
        
        #region Fields
        private UITxtNum2Window mUITxtNum2Window;
        
        private UITxtNum1Window mUITxtNum1Window;
        
        private UIAdditionWindow mUIAdditionWindow;
        
        private UITxtResulltWindow mUITxtResulltWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UITxtNum2Window : WinWindow
    {
        
        public UITxtNum2Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtNum2";
            this.WindowTitles.Add("FrmCalculator");
            #endregion
        }
        
        #region Properties
        public WinEdit UITxtNum2Edit
        {
            get
            {
                if ((this.mUITxtNum2Edit == null))
                {
                    this.mUITxtNum2Edit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITxtNum2Edit.SearchProperties[WinEdit.PropertyNames.Name] = "The first number";
                    this.mUITxtNum2Edit.WindowTitles.Add("FrmCalculator");
                    #endregion
                }
                return this.mUITxtNum2Edit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITxtNum2Edit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UITxtNum1Window : WinWindow
    {
        
        public UITxtNum1Window(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtNum1";
            this.WindowTitles.Add("FrmCalculator");
            #endregion
        }
        
        #region Properties
        public WinEdit UITxtNum1Edit
        {
            get
            {
                if ((this.mUITxtNum1Edit == null))
                {
                    this.mUITxtNum1Edit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITxtNum1Edit.SearchProperties[WinEdit.PropertyNames.Name] = "The second number";
                    this.mUITxtNum1Edit.WindowTitles.Add("FrmCalculator");
                    #endregion
                }
                return this.mUITxtNum1Edit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITxtNum1Edit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIAdditionWindow : WinWindow
    {
        
        public UIAdditionWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnAddition";
            this.WindowTitles.Add("FrmCalculator");
            #endregion
        }
        
        #region Properties
        public WinButton UIAdditionButton
        {
            get
            {
                if ((this.mUIAdditionButton == null))
                {
                    this.mUIAdditionButton = new WinButton(this);
                    #region Search Criteria
                    this.mUIAdditionButton.SearchProperties[WinButton.PropertyNames.Name] = "Addition";
                    this.mUIAdditionButton.WindowTitles.Add("FrmCalculator");
                    #endregion
                }
                return this.mUIAdditionButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUIAdditionButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UITxtResulltWindow : WinWindow
    {
        
        public UITxtResulltWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtResullt";
            this.WindowTitles.Add("FrmCalculator");
            #endregion
        }
        
        #region Properties
        public WinEdit UITxtResulltEdit
        {
            get
            {
                if ((this.mUITxtResulltEdit == null))
                {
                    this.mUITxtResulltEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITxtResulltEdit.WindowTitles.Add("FrmCalculator");
                    #endregion
                }
                return this.mUITxtResulltEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITxtResulltEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UIFrmMinMaxWindow : WinWindow
    {
        
        public UIFrmMinMaxWindow()
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.Name] = "FrmMinMax";
            this.SearchProperties.Add(new PropertyExpression(WinWindow.PropertyNames.ClassName, "WindowsForms10.Window", PropertyExpressionOperator.Contains));
            this.WindowTitles.Add("FrmMinMax");
            #endregion
        }
        
        #region Properties
        public UITxtNumAWindow UITxtNumAWindow
        {
            get
            {
                if ((this.mUITxtNumAWindow == null))
                {
                    this.mUITxtNumAWindow = new UITxtNumAWindow(this);
                }
                return this.mUITxtNumAWindow;
            }
        }
        
        public UITxtNumBWindow UITxtNumBWindow
        {
            get
            {
                if ((this.mUITxtNumBWindow == null))
                {
                    this.mUITxtNumBWindow = new UITxtNumBWindow(this);
                }
                return this.mUITxtNumBWindow;
            }
        }
        
        public UITxtNumCWindow UITxtNumCWindow
        {
            get
            {
                if ((this.mUITxtNumCWindow == null))
                {
                    this.mUITxtNumCWindow = new UITxtNumCWindow(this);
                }
                return this.mUITxtNumCWindow;
            }
        }
        
        public UICalculateWindow UICalculateWindow
        {
            get
            {
                if ((this.mUICalculateWindow == null))
                {
                    this.mUICalculateWindow = new UICalculateWindow(this);
                }
                return this.mUICalculateWindow;
            }
        }
        
        public UITxtMaxWindow UITxtMaxWindow
        {
            get
            {
                if ((this.mUITxtMaxWindow == null))
                {
                    this.mUITxtMaxWindow = new UITxtMaxWindow(this);
                }
                return this.mUITxtMaxWindow;
            }
        }
        
        public UITxtMinWindow UITxtMinWindow
        {
            get
            {
                if ((this.mUITxtMinWindow == null))
                {
                    this.mUITxtMinWindow = new UITxtMinWindow(this);
                }
                return this.mUITxtMinWindow;
            }
        }
        #endregion
        
        #region Fields
        private UITxtNumAWindow mUITxtNumAWindow;
        
        private UITxtNumBWindow mUITxtNumBWindow;
        
        private UITxtNumCWindow mUITxtNumCWindow;
        
        private UICalculateWindow mUICalculateWindow;
        
        private UITxtMaxWindow mUITxtMaxWindow;
        
        private UITxtMinWindow mUITxtMinWindow;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UITxtNumAWindow : WinWindow
    {
        
        public UITxtNumAWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtNumA";
            this.WindowTitles.Add("FrmMinMax");
            #endregion
        }
        
        #region Properties
        public WinEdit UITxtNumAEdit
        {
            get
            {
                if ((this.mUITxtNumAEdit == null))
                {
                    this.mUITxtNumAEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITxtNumAEdit.WindowTitles.Add("FrmMinMax");
                    #endregion
                }
                return this.mUITxtNumAEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITxtNumAEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UITxtNumBWindow : WinWindow
    {
        
        public UITxtNumBWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtNumB";
            this.WindowTitles.Add("FrmMinMax");
            #endregion
        }
        
        #region Properties
        public WinEdit UITxtNumBEdit
        {
            get
            {
                if ((this.mUITxtNumBEdit == null))
                {
                    this.mUITxtNumBEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITxtNumBEdit.SearchProperties[WinEdit.PropertyNames.Name] = "A";
                    this.mUITxtNumBEdit.WindowTitles.Add("FrmMinMax");
                    #endregion
                }
                return this.mUITxtNumBEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITxtNumBEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UITxtNumCWindow : WinWindow
    {
        
        public UITxtNumCWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtNumC";
            this.WindowTitles.Add("FrmMinMax");
            #endregion
        }
        
        #region Properties
        public WinEdit UITxtNumCEdit
        {
            get
            {
                if ((this.mUITxtNumCEdit == null))
                {
                    this.mUITxtNumCEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITxtNumCEdit.SearchProperties[WinEdit.PropertyNames.Name] = "B";
                    this.mUITxtNumCEdit.WindowTitles.Add("FrmMinMax");
                    #endregion
                }
                return this.mUITxtNumCEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITxtNumCEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UICalculateWindow : WinWindow
    {
        
        public UICalculateWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "btnCalculate";
            this.WindowTitles.Add("FrmMinMax");
            #endregion
        }
        
        #region Properties
        public WinButton UICalculateButton
        {
            get
            {
                if ((this.mUICalculateButton == null))
                {
                    this.mUICalculateButton = new WinButton(this);
                    #region Search Criteria
                    this.mUICalculateButton.SearchProperties[WinButton.PropertyNames.Name] = "Calculate";
                    this.mUICalculateButton.WindowTitles.Add("FrmMinMax");
                    #endregion
                }
                return this.mUICalculateButton;
            }
        }
        #endregion
        
        #region Fields
        private WinButton mUICalculateButton;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UITxtMaxWindow : WinWindow
    {
        
        public UITxtMaxWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtMax";
            this.WindowTitles.Add("FrmMinMax");
            #endregion
        }
        
        #region Properties
        public WinEdit UITxtMaxEdit
        {
            get
            {
                if ((this.mUITxtMaxEdit == null))
                {
                    this.mUITxtMaxEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITxtMaxEdit.SearchProperties[WinEdit.PropertyNames.Name] = "C";
                    this.mUITxtMaxEdit.WindowTitles.Add("FrmMinMax");
                    #endregion
                }
                return this.mUITxtMaxEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITxtMaxEdit;
        #endregion
    }
    
    [GeneratedCode("Coded UITest Builder", "12.0.21005.1")]
    public class UITxtMinWindow : WinWindow
    {
        
        public UITxtMinWindow(UITestControl searchLimitContainer) : 
                base(searchLimitContainer)
        {
            #region Search Criteria
            this.SearchProperties[WinWindow.PropertyNames.ControlName] = "txtMin";
            this.WindowTitles.Add("FrmMinMax");
            #endregion
        }
        
        #region Properties
        public WinEdit UITxtMinEdit
        {
            get
            {
                if ((this.mUITxtMinEdit == null))
                {
                    this.mUITxtMinEdit = new WinEdit(this);
                    #region Search Criteria
                    this.mUITxtMinEdit.SearchProperties[WinEdit.PropertyNames.Name] = "Max";
                    this.mUITxtMinEdit.WindowTitles.Add("FrmMinMax");
                    #endregion
                }
                return this.mUITxtMinEdit;
            }
        }
        #endregion
        
        #region Fields
        private WinEdit mUITxtMinEdit;
        #endregion
    }
}
